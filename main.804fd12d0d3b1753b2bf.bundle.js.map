{"version":3,"file":"main.804fd12d0d3b1753b2bf.bundle.js","sources":["webpack:///./src/components/toast/index.tsx"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\n\nexport type ToastPlacement = 'topLeft'|'topCenter'|'topRight'|'bottomLeft'|'bottomCenter'|'bottomRight';\nexport type ToastPosition = 'top'|'left'|'right'|'bottom';\nexport type ToastIconType = 'info'|'warn'|'error'|'success'|'loading';\n\nexport interface ToastProps {\n  content: React.ReactNode;\n  icon?: React.ReactNode;\n  readonly type?: ToastIconType;\n  maxCount?: number;\n  duration?: number;\n  placement?: ToastPlacement;\n  getContainer?: () => HTMLElement;\n  onUndo?: () => void;\n  onClose?: () => void;\n  onPause?: () => void;\n  onResume?: () => void;\n  closeIcon?: React.ReactNode;\n  undoIcon?: React.ReactNode;\n}\n\n// export interface ToastConfigProps {\n//   top?: number|string;\n//   bottom?: number|string;\n//   left?: number|string;\n//   right?: number|string;\n//   duration?: number;\n//   maxCount?: number;\n//   placement?: ToastPlacement;\n//   getContainer?: () => HTMLElement;\n// }\n\n// tslint:disable-next-line:prefer-const\n// let toastConfig: ToastConfigProps = {\n//   top: 24,\n//   bottom: 'unset',\n//   left: 24,\n//   right: 'unset',\n//   maxCount: 1,\n//   duration: 3000,\n//   placement: 'topLeft',\n//   getContainer: () => document.body,\n// };\n\nfunction ToastContainer({\n  content,\n  onUndo,\n  onClose,\n  onPause,\n  onResume,\n  undoIcon = '[⟳]',\n  closeIcon = '[✕]',\n}: ToastProps) {\n  const handleUndo = () => {\n    onUndo && onUndo();\n  };\n  const handlePause = () => {\n    onPause && onPause();\n  };\n  const handleResume = () => {\n    onResume && onResume();\n  };\n  return (\n    <div onMouseEnter={handlePause} onMouseLeave={handleResume}>\n      {content}\n      {onUndo && <span className=\"undo\" onClick={handleUndo}>{undoIcon}</span>}\n      {onClose && <span className=\"close\" onClick={handleUndo}>{closeIcon}</span>}\n    </div>\n  );\n}\n\nconst uuid = (): string => (Math.random().toString(36) + Date.now().toString(36)).substr(2, 10);\n\nlet TOAST_ID = uuid();\nlet toastTimer: any = null;\nconst allToast: HTMLElement|any = [];\n\n// toast root container create\nconst rootContainer: any = document.createElement('div');\nrootContainer.id = 'toast__root';\nconst spanContainer = document.createElement('span');\nspanContainer.classList.add('toast__root__container');\nrootContainer.appendChild(spanContainer);\nconst toastPrefixCls = '#toast__root .toast__root__container';\n\n// toast(#toast__root) placement style\nconst placementStyle = (position: ToastPosition, num: number|string) => rootContainer.style[position] = num;\nfunction renderPlacement(placement: ToastPlacement) {\n  rootContainer.style = {\n    top: 'unset',\n    left: 'unset',\n    right: 'unset',\n    bottom: 'unset',\n    transform: 'unset',\n  };\n\n  switch (placement) {\n    case 'topLeft':\n      placementStyle('top', 0);\n      placementStyle('left', 0);\n      break;\n    case 'topCenter':\n      placementStyle('top', 0);\n      placementStyle('left', '50%');\n      rootContainer.style.transform = 'translate(-50%, 0)';\n      break;\n    case 'topRight':\n      placementStyle('top', 0);\n      placementStyle('right', 0);\n      break;\n    case 'bottomLeft':\n      placementStyle('bottom', 0);\n      placementStyle('left', 0);\n      break;\n    case 'bottomCenter':\n      placementStyle('bottom', 0);\n      placementStyle('left', '50%');\n      rootContainer.style.transform = 'translate(-50%, 0)';\n      break;\n    case 'bottomRight':\n      placementStyle('bottom', 0);\n      placementStyle('right', 0);\n      break;\n    default:\n      break;\n  }\n}\n\nexport const toast = ({\n  content,\n  getContainer,\n  maxCount = 1,\n  duration = 3000,\n  placement = 'bottomCenter',\n  ...rest\n}: ToastProps) => {\n  // const { placement, getContainer, maxCount, duration } = toastConfig;\n  const TOAST_ITEM_ID = `toast__item__${TOAST_ID}`;\n  let rootNode = document.querySelector(toastPrefixCls);\n  let toastItem: any = document.getElementById(TOAST_ITEM_ID);\n\n  const isTop = /top/ig.test(placement!);\n  const itemAni = isTop ? 'Top' : 'Bottom';\n  renderPlacement(placement!);\n\n  if (!rootNode) {\n    const root = (typeof getContainer === 'function' && getContainer()) || document.body;\n    root.appendChild(rootContainer);\n    rootNode = document.querySelector(toastPrefixCls);\n  }\n\n  if (!toastItem) {\n    toastItem = document.createElement('div');\n    toastItem.id = TOAST_ITEM_ID;\n    toastItem.classList.add('toast__item', `fade${itemAni}In`);\n  }\n\n  const removeChid = (type: string) => {\n    if (allToast.length > 0) {\n      const removeEl = allToast[0];\n      removeEl.classList.add(`fade${itemAni}Out`);\n      const removeNode = () => {\n        rootNode && rootNode.removeChild(allToast[0]);\n        allToast.shift();\n      }\n      type === 'force'\n        ? removeNode()\n        : setTimeout(removeNode, 300)\n    }\n  };\n\n  // toast max count\n  if (allToast.length >= maxCount!) {\n    removeChid('force');\n  } else {\n    toastTimer = null;\n  }\n\n  TOAST_ID = uuid();\n  let remaining: number;\n  const start = Date.now();\n  clearTimeout(toastTimer);\n  remaining = duration!;\n\n  const handleOnPause = () => {\n    // console.info('Pause');\n    clearTimeout(toastTimer);\n    remaining -= Date.now() - start;\n  };\n  const handleOnResume = () => {\n    // console.info('Init/Resume');\n    toastTimer = setTimeout(() => {\n      removeChid('auto');\n    }, remaining);\n  };\n  handleOnResume();\n\n  const toastProps = {\n    content,\n    onPause: handleOnPause,\n    onResume: handleOnResume,\n    ...rest,\n  };\n  ReactDOM.render(<ToastContainer {...toastProps} />, toastItem)\n  if (rootNode) {\n    allToast.push(toastItem);\n    rootNode.appendChild(toastItem);\n  }\n};\n\nexport default toast;\ntry {\n    // @ts-ignore\n    toast.displayName = \"toast\";\n    // @ts-ignore\n    toast.__docgenInfo = { \"description\": \"\", \"displayName\": \"toast\", \"props\": { \"content\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"content\", \"required\": true, \"type\": { \"name\": \"any\" } }, \"icon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"icon\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"type\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"type\", \"required\": false, \"type\": { \"name\": \"ToastIconType\" } }, \"maxCount\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"maxCount\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"duration\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"duration\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"placement\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"placement\", \"required\": false, \"type\": { \"name\": \"ToastPlacement\" } }, \"getContainer\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getContainer\", \"required\": false, \"type\": { \"name\": \"() => HTMLElement\" } }, \"onUndo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onUndo\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onClose\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onClose\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onPause\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onPause\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onResume\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onResume\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"closeIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"closeIcon\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"undoIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"undoIcon\", \"required\": false, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/toast/index.tsx#toast\"] = { docgenInfo: toast.__docgenInfo, name: \"toast\", path: \"src/components/toast/index.tsx#toast\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAgDA","sourceRoot":""}